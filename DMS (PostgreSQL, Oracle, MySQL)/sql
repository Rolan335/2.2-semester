--------------------------------------------------------
--  File created - понедельник-июня-05-2023   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table CARGO
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."CARGO" 
   (	"ID_CARGO" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CARGO_DESCRIPTION" VARCHAR2(200 BYTE), 
	"REQUEST_ID" NUMBER(*,0), 
	"CARGO_WIDTH" NUMBER(*,0), 
	"CARGO_HEIGHT" NUMBER(*,0), 
	"CARGO_LENGTH" NUMBER(*,0), 
	"CARGO_WEIGHT" NUMBER(*,0), 
	"CARGO_PRICE" NUMBER(*,0) DEFAULT (0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."CARGO" TO "C##CLIENT";
  GRANT SELECT ON "C##CARGO_DEV"."CARGO" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."CARGO" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table CLIENT
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."CLIENT" 
   (	"ID_CLIENT" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CLIENT_ORGANIZATION_NAME" VARCHAR2(100 BYTE), 
	"CLIENT_LEGAL_ADDRESS" VARCHAR2(100 BYTE) DEFAULT ('-'), 
	"CLIENT_PHYSICAL_ADDRESS" VARCHAR2(100 BYTE), 
	"CLIENT_ITN" VARCHAR2(11 BYTE), 
	"CLIENT_BIC" VARCHAR2(10 BYTE), 
	"CLIENT_OKPO" VARCHAR2(11 BYTE), 
	"CLIENT_REPR_SURNAME" VARCHAR2(30 BYTE), 
	"CLIENT_REPR_NAME" VARCHAR2(30 BYTE), 
	"CLIENT_REPR_SECOND_NAME" VARCHAR2(30 BYTE) DEFAULT ('-')
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."CLIENT" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."CLIENT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table COMBINATION_ROUTE_SHEET_CARGO
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO" 
   (	"ID_COMBINATION_ROUTE_SHEET_CARGO" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROUTE_SHEET_ID" NUMBER(*,0), 
	"CARGO_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table COMBINATION_ROUTE_SHEET_DELIVERY_POINT
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT" 
   (	"ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROUTE_SHEET_ID" NUMBER(*,0), 
	"DELIVERY_POINT_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table COMPLEXITY
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."COMPLEXITY" 
   (	"ID_COMPLEXITY" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"COMPLEXITY_LEVEL" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."COMPLEXITY" TO "C##DRIVER";
  GRANT SELECT ON "C##CARGO_DEV"."COMPLEXITY" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."COMPLEXITY" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table DELIVERY_POINT
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."DELIVERY_POINT" 
   (	"ID_DELIVERY_POINT" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"DELIVERY_POINT_MARK" VARCHAR2(1 BYTE) DEFAULT ('-'), 
	"REQUEST_ID" NUMBER(*,0), 
	"DELIVERY_POINT_DESTINATION" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."DELIVERY_POINT" TO "C##CLIENT";
  GRANT SELECT ON "C##CARGO_DEV"."DELIVERY_POINT" TO "C##DRIVER";
  GRANT SELECT ON "C##CARGO_DEV"."DELIVERY_POINT" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."DELIVERY_POINT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table DRIVER
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."DRIVER" 
   (	"ID_DRIVER" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"DRIVER_SURNAME" VARCHAR2(30 BYTE), 
	"DRIVER_NAME" VARCHAR2(30 BYTE), 
	"DRIVER_SECOND_NAME" VARCHAR2(30 BYTE) DEFAULT ('-'), 
	"DRIVER_PASSPORT_SERIES" VARCHAR2(4 BYTE), 
	"DRIVER_PASSPORT_NUMBER" VARCHAR2(6 BYTE), 
	"DRIVER_SNILS" VARCHAR2(14 BYTE), 
	"DRIVER_FFOMI" VARCHAR2(16 BYTE), 
	"DRIVER_LICENSE_SERIES" VARCHAR2(4 BYTE), 
	"DRIVER_LICENSE_NUMBER" VARCHAR2(6 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."DRIVER" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."DRIVER" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table MANAGER
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."MANAGER" 
   (	"ID_MANAGER" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"MANAGER_SURNAME" VARCHAR2(30 BYTE), 
	"MANAGER_NAME" VARCHAR2(30 BYTE), 
	"MANAGER_SECOND_NAME" VARCHAR2(30 BYTE) DEFAULT ('-'), 
	"MANAGER_PASSPORT_SERIES" VARCHAR2(4 BYTE), 
	"MANAGER_PASSPORT_NUMBER" VARCHAR2(6 BYTE), 
	"MANAGER_ITN" VARCHAR2(10 BYTE), 
	"MANAGER_SNILS" VARCHAR2(14 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."MANAGER" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table REQUEST
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."REQUEST" 
   (	"ID_REQUEST" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"REQUEST_NUMBER" VARCHAR2(8 BYTE), 
	"MANAGER_ID" NUMBER(*,0), 
	"CLIENT_ID" NUMBER(*,0), 
	"REQUEST_DATE" DATE DEFAULT (CURRENT_DATE), 
	"REQUEST_TIME" TIMESTAMP (6) DEFAULT (CURRENT_TIMESTAMP)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."REQUEST" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."REQUEST" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table ROUTE_SHEET
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."ROUTE_SHEET" 
   (	"ID_ROUTE_SHEET" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROUTE_SHEET_NUMBER" VARCHAR2(8 BYTE), 
	"COMPLEXITY_ID" NUMBER(*,0), 
	"VEHICLE_ID" NUMBER(*,0), 
	"DRIVER_ID" NUMBER(*,0), 
	"ROUTE_SHEET_DATE" DATE DEFAULT (CURRENT_TIMESTAMP)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."ROUTE_SHEET" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."ROUTE_SHEET" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Table VEHICLE
--------------------------------------------------------

  CREATE TABLE "C##CARGO_DEV"."VEHICLE" 
   (	"ID_VEHICLE" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"VEHICLE_WIDTH" NUMBER(*,0), 
	"VEHICLE_HEIGHT" NUMBER(*,0), 
	"VEHICLE_LENGTH" NUMBER(*,0), 
	"VEHICLE_CAPACITY" NUMBER(*,0), 
	"VEHICLE_STATE_NUMBER" VARCHAR2(13 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT SELECT ON "C##CARGO_DEV"."VEHICLE" TO "C##DRIVER";
  GRANT SELECT ON "C##CARGO_DEV"."VEHICLE" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."VEHICLE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for View DRIVER_LIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "C##CARGO_DEV"."DRIVER_LIST" ("ФИО водителя", "Паспортные данные", "СНИЛС", "Полис ФОМС", "Реквизиты прав") AS 
  Select Driver_Surname||' '||Driver_Name||' '||Driver_Second_Name,Driver_Passport_Series||' '||Driver_Passport_Number,Driver_SNILS, Driver_FFOMI,Driver_License_Series||' '||Driver_Passport_Number
		from Driver
	order by Driver_Surname asc
;
  GRANT SELECT ON "C##CARGO_DEV"."DRIVER_LIST" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."DRIVER_LIST" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for View REQUEST_LIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "C##CARGO_DEV"."REQUEST_LIST" ("Номер", "Заказчик", "Дата", "Время", "Точки доставки", "Транспортируемый груз", "Габариты груза", "Вес груза", "Стоимость груза") AS 
  select Request_Number, Client_Organization_Name, Request_Date,Request_Time, LISTAGG(delivery_Point_destination ||' '|| Delivery_Point_Mark, ' ; '), Cargo_Description, Cargo_Width ||' X '|| Cargo_Height 
			||' X '|| Cargo_Length, Cargo_Weight, Cargo_Price from Request
		inner join Client on ID_Client = Client_ID
        inner join Delivery_Point on Request_ID = ID_Request
        inner join Cargo on Cargo.Request_ID = ID_Request
        group by Request_Number, Client_Organization_Name, Request_Date,Request_Time, Cargo_Description, Cargo_Width ||' X '|| Cargo_Height 
			||' X '|| Cargo_Length, Cargo_Weight, Cargo_Price
		order by Request_Number asc
;
  GRANT SELECT ON "C##CARGO_DEV"."REQUEST_LIST" TO "C##CLIENT";
  GRANT SELECT ON "C##CARGO_DEV"."REQUEST_LIST" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for View ROUTE_SHEET_LIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "C##CARGO_DEV"."ROUTE_SHEET_LIST" ("Номер маршрутного листа", "Номер принадлежащих заявок", "ФИО Менеджера", "Дата формирования") AS 
  Select Route_Sheet_Number, LISTAGG(Request_Number,' ; '), Manager_Surname ||' '|| Manager_Name||' '|| Manager_Second_Name, 
			Route_Sheet_Date From Route_Sheet
		inner join Combination_Route_Sheet_Delivery_Point on ID_Route_Sheet = Route_Sheet_ID
		inner join Delivery_Point on Delivery_Point_ID = ID_Delivery_Point
		inner join Request on Request_ID = ID_Request
		inner join Manager on Manager_ID = ID_Manager
		group by Route_Sheet_Number,Manager_Surname ||' '|| Manager_Name||' '|| Manager_Second_Name,  
			Route_Sheet_Date
		order by Route_Sheet_Number asc
;
  GRANT SELECT ON "C##CARGO_DEV"."ROUTE_SHEET_LIST" TO "C##DRIVER";
  GRANT SELECT ON "C##CARGO_DEV"."ROUTE_SHEET_LIST" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for View VEHICLE_LIST
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "C##CARGO_DEV"."VEHICLE_LIST" ("Государственный номер", "Ширина грузовой части", "Высота грузовой части", "Длина грузовой части", "Грузоподъёмность") AS 
  Select Vehicle_State_Number, Vehicle_Width, Vehicle_Height, Vehicle_Length, Vehicle_Capacity from Vehicle
	order by vehicle_capacity asc
;
  GRANT SELECT ON "C##CARGO_DEV"."VEHICLE_LIST" TO "C##DRIVER";
  GRANT SELECT ON "C##CARGO_DEV"."VEHICLE_LIST" TO "C##MANAGER";
  GRANT SELECT ON "C##CARGO_DEV"."VEHICLE_LIST" TO "C##GC_ADMIN";
REM INSERTING into C##CARGO_DEV.CARGO
SET DEFINE OFF;
Insert into C##CARGO_DEV.CARGO (ID_CARGO,CARGO_DESCRIPTION,REQUEST_ID,CARGO_WIDTH,CARGO_HEIGHT,CARGO_LENGTH,CARGO_WEIGHT,CARGO_PRICE) values ('6','Упаковочная плёнка пластиковая','17','123','81','74','100','50000');
Insert into C##CARGO_DEV.CARGO (ID_CARGO,CARGO_DESCRIPTION,REQUEST_ID,CARGO_WIDTH,CARGO_HEIGHT,CARGO_LENGTH,CARGO_WEIGHT,CARGO_PRICE) values ('7','Алюминивые балки 10x10','18','100','100','50','1000','39900');
Insert into C##CARGO_DEV.CARGO (ID_CARGO,CARGO_DESCRIPTION,REQUEST_ID,CARGO_WIDTH,CARGO_HEIGHT,CARGO_LENGTH,CARGO_WEIGHT,CARGO_PRICE) values ('8','Вода бутилированая 19л','20','124','75','70','200','71000');
Insert into C##CARGO_DEV.CARGO (ID_CARGO,CARGO_DESCRIPTION,REQUEST_ID,CARGO_WIDTH,CARGO_HEIGHT,CARGO_LENGTH,CARGO_WEIGHT,CARGO_PRICE) values ('9','Ёлки новогодние пластиковые','21','137','91','75','500','100101');
Insert into C##CARGO_DEV.CARGO (ID_CARGO,CARGO_DESCRIPTION,REQUEST_ID,CARGO_WIDTH,CARGO_HEIGHT,CARGO_LENGTH,CARGO_WEIGHT,CARGO_PRICE) values ('10','Подшипники ABEC 5','25','121','100','91','90','33900');
REM INSERTING into C##CARGO_DEV.CLIENT
SET DEFINE OFF;
Insert into C##CARGO_DEV.CLIENT (ID_CLIENT,CLIENT_ORGANIZATION_NAME,CLIENT_LEGAL_ADDRESS,CLIENT_PHYSICAL_ADDRESS,CLIENT_ITN,CLIENT_BIC,CLIENT_OKPO,CLIENT_REPR_SURNAME,CLIENT_REPR_NAME,CLIENT_REPR_SECOND_NAME) values ('21','ООО "Перевозкин"','пр-д Якушкина, 2, Москва, 127273','Правды ул., д 24, стр 3, Москва, 105064','3512128670','144141972','4821611193','Иванов','Иван','Иванович');
Insert into C##CARGO_DEV.CLIENT (ID_CLIENT,CLIENT_ORGANIZATION_NAME,CLIENT_LEGAL_ADDRESS,CLIENT_PHYSICAL_ADDRESS,CLIENT_ITN,CLIENT_BIC,CLIENT_OKPO,CLIENT_REPR_SURNAME,CLIENT_REPR_NAME,CLIENT_REPR_SECOND_NAME) values ('22','ООО "Перевозкин"','пр-д Якушкина, 2, Москва, 127273','Правды ул., д 24, стр 3, Москва, 105064','3512120000','144000972','4800011193','Иванов','Иван','Иванович');
Insert into C##CARGO_DEV.CLIENT (ID_CLIENT,CLIENT_ORGANIZATION_NAME,CLIENT_LEGAL_ADDRESS,CLIENT_PHYSICAL_ADDRESS,CLIENT_ITN,CLIENT_BIC,CLIENT_OKPO,CLIENT_REPR_SURNAME,CLIENT_REPR_NAME,CLIENT_REPR_SECOND_NAME) values ('3','ООО "Перевозкин"','пр-д Якушкина, 2, Москва, 127273','Правды ул., д 24, стр 3, Москва, 105064','3511128670','144111972','4821111193','Иванов','Иван','Иванович');
Insert into C##CARGO_DEV.CLIENT (ID_CLIENT,CLIENT_ORGANIZATION_NAME,CLIENT_LEGAL_ADDRESS,CLIENT_PHYSICAL_ADDRESS,CLIENT_ITN,CLIENT_BIC,CLIENT_OKPO,CLIENT_REPR_SURNAME,CLIENT_REPR_NAME,CLIENT_REPR_SECOND_NAME) values ('4','ООО "СтройМент"','ул. Снежная, 23, Москва, 129323','Смирновская ул., 6, Люберцы, Московская обл., 140005','4829572957','044525225','4995123385','Ерёменко','Владлен','Владленович');
Insert into C##CARGO_DEV.CLIENT (ID_CLIENT,CLIENT_ORGANIZATION_NAME,CLIENT_LEGAL_ADDRESS,CLIENT_PHYSICAL_ADDRESS,CLIENT_ITN,CLIENT_BIC,CLIENT_OKPO,CLIENT_REPR_SURNAME,CLIENT_REPR_NAME,CLIENT_REPR_SECOND_NAME) values ('5','ИП "Альбертов"','ул. Крупешина, 36, Балашиха, Московская обл., 143910','ул. Крупешина, 36, Балашиха, Московская обл., 143910','5798325789','044525643','4824059416','Джон','Доэ','Смитович');
Insert into C##CARGO_DEV.CLIENT (ID_CLIENT,CLIENT_ORGANIZATION_NAME,CLIENT_LEGAL_ADDRESS,CLIENT_PHYSICAL_ADDRESS,CLIENT_ITN,CLIENT_BIC,CLIENT_OKPO,CLIENT_REPR_SURNAME,CLIENT_REPR_NAME,CLIENT_REPR_SECOND_NAME) values ('6','ОАО "Фондбра"','ул. Индустриальная, 13в, Мытищи, Московская обл., 141006','ул. Авиаконструктора Миля, 7, Москва, 109156','2759478104','044525974','4824096316','Никитенко','Никита','Никитин');
Insert into C##CARGO_DEV.CLIENT (ID_CLIENT,CLIENT_ORGANIZATION_NAME,CLIENT_LEGAL_ADDRESS,CLIENT_PHYSICAL_ADDRESS,CLIENT_ITN,CLIENT_BIC,CLIENT_OKPO,CLIENT_REPR_SURNAME,CLIENT_REPR_NAME,CLIENT_REPR_SECOND_NAME) values ('7','ООО "Перевозкин"','пр-д Якушкина, 2, Москва, 127273','Правды ул., д 24, стр 3, Москва, 105064','3911128670','144325972','4824996393','Иванов','Иван','Иванович');
REM INSERTING into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO
SET DEFINE OFF;
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('1','2','6');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('2','4','7');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('3','5','8');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('4','4','9');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('6','3','6');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('7','4','7');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('8','3','8');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('9','2','9');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('10','2','6');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_CARGO (ID_COMBINATION_ROUTE_SHEET_CARGO,ROUTE_SHEET_ID,CARGO_ID) values ('11','2','7');
REM INSERTING into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT
SET DEFINE OFF;
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT (ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT,ROUTE_SHEET_ID,DELIVERY_POINT_ID) values ('1','2','6');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT (ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT,ROUTE_SHEET_ID,DELIVERY_POINT_ID) values ('2','3','6');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT (ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT,ROUTE_SHEET_ID,DELIVERY_POINT_ID) values ('3','5','7');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT (ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT,ROUTE_SHEET_ID,DELIVERY_POINT_ID) values ('4','5','7');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT (ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT,ROUTE_SHEET_ID,DELIVERY_POINT_ID) values ('5','5','8');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT (ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT,ROUTE_SHEET_ID,DELIVERY_POINT_ID) values ('6','3','8');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT (ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT,ROUTE_SHEET_ID,DELIVERY_POINT_ID) values ('7','4','9');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT (ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT,ROUTE_SHEET_ID,DELIVERY_POINT_ID) values ('8','6','9');
Insert into C##CARGO_DEV.COMBINATION_ROUTE_SHEET_DELIVERY_POINT (ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT,ROUTE_SHEET_ID,DELIVERY_POINT_ID) values ('9','3','10');
REM INSERTING into C##CARGO_DEV.COMPLEXITY
SET DEFINE OFF;
Insert into C##CARGO_DEV.COMPLEXITY (ID_COMPLEXITY,COMPLEXITY_LEVEL) values ('1','1');
Insert into C##CARGO_DEV.COMPLEXITY (ID_COMPLEXITY,COMPLEXITY_LEVEL) values ('2','2');
Insert into C##CARGO_DEV.COMPLEXITY (ID_COMPLEXITY,COMPLEXITY_LEVEL) values ('3','3');
REM INSERTING into C##CARGO_DEV.DELIVERY_POINT
SET DEFINE OFF;
Insert into C##CARGO_DEV.DELIVERY_POINT (ID_DELIVERY_POINT,DELIVERY_POINT_MARK,REQUEST_ID,DELIVERY_POINT_DESTINATION) values ('6','+','17','ул. Карбышева, 77, Самара, Самарская обл., 443090');
Insert into C##CARGO_DEV.DELIVERY_POINT (ID_DELIVERY_POINT,DELIVERY_POINT_MARK,REQUEST_ID,DELIVERY_POINT_DESTINATION) values ('7','+','17','ул. Карла Маркса, 43А, Екатеринбург, Свердловская обл., 620026');
Insert into C##CARGO_DEV.DELIVERY_POINT (ID_DELIVERY_POINT,DELIVERY_POINT_MARK,REQUEST_ID,DELIVERY_POINT_DESTINATION) values ('8','+','20','Комсомольская ул., 21, Екатеринбург, Свердловская обл., 620137');
Insert into C##CARGO_DEV.DELIVERY_POINT (ID_DELIVERY_POINT,DELIVERY_POINT_MARK,REQUEST_ID,DELIVERY_POINT_DESTINATION) values ('9','+','21','пр. Кирова, 170, Самара, Самарская обл., 443087');
Insert into C##CARGO_DEV.DELIVERY_POINT (ID_DELIVERY_POINT,DELIVERY_POINT_MARK,REQUEST_ID,DELIVERY_POINT_DESTINATION) values ('10','+','25','ул. Малышева, 85, Екатеринбург, Свердловская обл., 620075');
REM INSERTING into C##CARGO_DEV.DRIVER
SET DEFINE OFF;
Insert into C##CARGO_DEV.DRIVER (ID_DRIVER,DRIVER_SURNAME,DRIVER_NAME,DRIVER_SECOND_NAME,DRIVER_PASSPORT_SERIES,DRIVER_PASSPORT_NUMBER,DRIVER_SNILS,DRIVER_FFOMI,DRIVER_LICENSE_SERIES,DRIVER_LICENSE_NUMBER) values ('6','Монахов','Александр','Александрович','1204','285929','927-794-821 82','3967385958392656','3996','495839');
Insert into C##CARGO_DEV.DRIVER (ID_DRIVER,DRIVER_SURNAME,DRIVER_NAME,DRIVER_SECOND_NAME,DRIVER_PASSPORT_SERIES,DRIVER_PASSPORT_NUMBER,DRIVER_SNILS,DRIVER_FFOMI,DRIVER_LICENSE_SERIES,DRIVER_LICENSE_NUMBER) values ('7','Никитин','Никита','Никитович','4501','582019','311-111-111 10','5325837193829480','0509','124859');
Insert into C##CARGO_DEV.DRIVER (ID_DRIVER,DRIVER_SURNAME,DRIVER_NAME,DRIVER_SECOND_NAME,DRIVER_PASSPORT_SERIES,DRIVER_PASSPORT_NUMBER,DRIVER_SNILS,DRIVER_FFOMI,DRIVER_LICENSE_SERIES,DRIVER_LICENSE_NUMBER) values ('8','Иванов','Иван','Иванович','2104','285938','421-124-552 02','4738593857205732','0684','018592');
Insert into C##CARGO_DEV.DRIVER (ID_DRIVER,DRIVER_SURNAME,DRIVER_NAME,DRIVER_SECOND_NAME,DRIVER_PASSPORT_SERIES,DRIVER_PASSPORT_NUMBER,DRIVER_SNILS,DRIVER_FFOMI,DRIVER_LICENSE_SERIES,DRIVER_LICENSE_NUMBER) values ('9','Кириллов','Кирилл','Кириллович','7702','205814','415-126-281 82','3859302759383967','4804','291842');
Insert into C##CARGO_DEV.DRIVER (ID_DRIVER,DRIVER_SURNAME,DRIVER_NAME,DRIVER_SECOND_NAME,DRIVER_PASSPORT_SERIES,DRIVER_PASSPORT_NUMBER,DRIVER_SNILS,DRIVER_FFOMI,DRIVER_LICENSE_SERIES,DRIVER_LICENSE_NUMBER) values ('10','Никитин','Никита','Никитович','4501','582019','214-913-000 00','5325832193829480','0509','124859');
REM INSERTING into C##CARGO_DEV.MANAGER
SET DEFINE OFF;
Insert into C##CARGO_DEV.MANAGER (ID_MANAGER,MANAGER_SURNAME,MANAGER_NAME,MANAGER_SECOND_NAME,MANAGER_PASSPORT_SERIES,MANAGER_PASSPORT_NUMBER,MANAGER_ITN,MANAGER_SNILS) values ('10','Никитин','Никита','Никитович','3604','285928','4729582958','214-942-124 00');
Insert into C##CARGO_DEV.MANAGER (ID_MANAGER,MANAGER_SURNAME,MANAGER_NAME,MANAGER_SECOND_NAME,MANAGER_PASSPORT_SERIES,MANAGER_PASSPORT_NUMBER,MANAGER_ITN,MANAGER_SNILS) values ('11','Иванов','Глеб','Иванович','7201','485822','4829573910','421-124-582 02');
Insert into C##CARGO_DEV.MANAGER (ID_MANAGER,MANAGER_SURNAME,MANAGER_NAME,MANAGER_SECOND_NAME,MANAGER_PASSPORT_SERIES,MANAGER_PASSPORT_NUMBER,MANAGER_ITN,MANAGER_SNILS) values ('12','Кириллов','Кирилл','Кириллович','6703','758173','3890473859','235-126-281 82');
Insert into C##CARGO_DEV.MANAGER (ID_MANAGER,MANAGER_SURNAME,MANAGER_NAME,MANAGER_SECOND_NAME,MANAGER_PASSPORT_SERIES,MANAGER_PASSPORT_NUMBER,MANAGER_ITN,MANAGER_SNILS) values ('13','Артёмин','Артём','Артёмович','6307','837292','2959340372','215-581-295 98');
Insert into C##CARGO_DEV.MANAGER (ID_MANAGER,MANAGER_SURNAME,MANAGER_NAME,MANAGER_SECOND_NAME,MANAGER_PASSPORT_SERIES,MANAGER_PASSPORT_NUMBER,MANAGER_ITN,MANAGER_SNILS) values ('14','Монахов','Александр','Александрович','7594','845718','3958120353','325-794-821 82');
REM INSERTING into C##CARGO_DEV.REQUEST
SET DEFINE OFF;
Insert into C##CARGO_DEV.REQUEST (ID_REQUEST,REQUEST_NUMBER,MANAGER_ID,CLIENT_ID,REQUEST_DATE,REQUEST_TIME) values ('17','00000166','10','5',to_date('11.11.20','DD.MM.RR'),to_timestamp('11.11.20 20:13:10,000000000','DD.MM.RR HH24:MI:SSXFF'));
Insert into C##CARGO_DEV.REQUEST (ID_REQUEST,REQUEST_NUMBER,MANAGER_ID,CLIENT_ID,REQUEST_DATE,REQUEST_TIME) values ('18','128','14','3',to_date('01.11.20','DD.MM.RR'),to_timestamp('01.11.20 20:18:40,000000000','DD.MM.RR HH24:MI:SSXFF'));
Insert into C##CARGO_DEV.REQUEST (ID_REQUEST,REQUEST_NUMBER,MANAGER_ID,CLIENT_ID,REQUEST_DATE,REQUEST_TIME) values ('20','300','11','6',to_date('18.11.20','DD.MM.RR'),to_timestamp('18.11.20 20:15:36,000000000','DD.MM.RR HH24:MI:SSXFF'));
Insert into C##CARGO_DEV.REQUEST (ID_REQUEST,REQUEST_NUMBER,MANAGER_ID,CLIENT_ID,REQUEST_DATE,REQUEST_TIME) values ('21',null,'13','7',to_date('09.11.20','DD.MM.RR'),to_timestamp('09.11.20 20:18:29,000000000','DD.MM.RR HH24:MI:SSXFF'));
Insert into C##CARGO_DEV.REQUEST (ID_REQUEST,REQUEST_NUMBER,MANAGER_ID,CLIENT_ID,REQUEST_DATE,REQUEST_TIME) values ('25',null,'12','7',to_date('13.11.20','DD.MM.RR'),to_timestamp('13.11.20 20:14:41,000000000','DD.MM.RR HH24:MI:SSXFF'));
REM INSERTING into C##CARGO_DEV.ROUTE_SHEET
SET DEFINE OFF;
Insert into C##CARGO_DEV.ROUTE_SHEET (ID_ROUTE_SHEET,ROUTE_SHEET_NUMBER,COMPLEXITY_ID,VEHICLE_ID,DRIVER_ID,ROUTE_SHEET_DATE) values ('2','00000002','1','15','6',to_date('04.08.19','DD.MM.RR'));
Insert into C##CARGO_DEV.ROUTE_SHEET (ID_ROUTE_SHEET,ROUTE_SHEET_NUMBER,COMPLEXITY_ID,VEHICLE_ID,DRIVER_ID,ROUTE_SHEET_DATE) values ('3','00000003','2','16','7',to_date('12.08.19','DD.MM.RR'));
Insert into C##CARGO_DEV.ROUTE_SHEET (ID_ROUTE_SHEET,ROUTE_SHEET_NUMBER,COMPLEXITY_ID,VEHICLE_ID,DRIVER_ID,ROUTE_SHEET_DATE) values ('4','00000004','2','17','8',to_date('17.08.19','DD.MM.RR'));
Insert into C##CARGO_DEV.ROUTE_SHEET (ID_ROUTE_SHEET,ROUTE_SHEET_NUMBER,COMPLEXITY_ID,VEHICLE_ID,DRIVER_ID,ROUTE_SHEET_DATE) values ('5','00001011','3','18','9',to_date('27.08.19','DD.MM.RR'));
Insert into C##CARGO_DEV.ROUTE_SHEET (ID_ROUTE_SHEET,ROUTE_SHEET_NUMBER,COMPLEXITY_ID,VEHICLE_ID,DRIVER_ID,ROUTE_SHEET_DATE) values ('6',null,'1','19','10',to_date('02.09.19','DD.MM.RR'));
REM INSERTING into C##CARGO_DEV.VEHICLE
SET DEFINE OFF;
Insert into C##CARGO_DEV.VEHICLE (ID_VEHICLE,VEHICLE_WIDTH,VEHICLE_HEIGHT,VEHICLE_LENGTH,VEHICLE_CAPACITY,VEHICLE_STATE_NUMBER) values ('15','355','195','165','1500','АМ482Н 93');
Insert into C##CARGO_DEV.VEHICLE (ID_VEHICLE,VEHICLE_WIDTH,VEHICLE_HEIGHT,VEHICLE_LENGTH,VEHICLE_CAPACITY,VEHICLE_STATE_NUMBER) values ('16','380','210','200','3000','ТР931Л 481');
Insert into C##CARGO_DEV.VEHICLE (ID_VEHICLE,VEHICLE_WIDTH,VEHICLE_HEIGHT,VEHICLE_LENGTH,VEHICLE_CAPACITY,VEHICLE_STATE_NUMBER) values ('17','300','195','165','1500','АР291У 291');
Insert into C##CARGO_DEV.VEHICLE (ID_VEHICLE,VEHICLE_WIDTH,VEHICLE_HEIGHT,VEHICLE_LENGTH,VEHICLE_CAPACITY,VEHICLE_STATE_NUMBER) values ('18','380','210','200','3000','БД101К 381');
Insert into C##CARGO_DEV.VEHICLE (ID_VEHICLE,VEHICLE_WIDTH,VEHICLE_HEIGHT,VEHICLE_LENGTH,VEHICLE_CAPACITY,VEHICLE_STATE_NUMBER) values ('19','300','195','165','1500','КК124Ц 90');
Insert into C##CARGO_DEV.VEHICLE (ID_VEHICLE,VEHICLE_WIDTH,VEHICLE_HEIGHT,VEHICLE_LENGTH,VEHICLE_CAPACITY,VEHICLE_STATE_NUMBER) values ('21','100','100','100','1400','ОО000О 00');
--------------------------------------------------------
--  DDL for Index PK_CARGO
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."PK_CARGO" ON "C##CARGO_DEV"."CARGO" ("ID_CARGO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_CLIENT
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."PK_CLIENT" ON "C##CARGO_DEV"."CLIENT" ("ID_CLIENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_COMPLEXITY
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."PK_COMPLEXITY" ON "C##CARGO_DEV"."COMPLEXITY" ("ID_COMPLEXITY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DELIVERY_POINT
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."PK_DELIVERY_POINT" ON "C##CARGO_DEV"."DELIVERY_POINT" ("ID_DELIVERY_POINT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DRIVER
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."PK_DRIVER" ON "C##CARGO_DEV"."DRIVER" ("ID_DRIVER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_MANAGER
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."PK_MANAGER" ON "C##CARGO_DEV"."MANAGER" ("ID_MANAGER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_REQUEST
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."PK_REQUEST" ON "C##CARGO_DEV"."REQUEST" ("ID_REQUEST") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ROUTE_SHEET
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."PK_ROUTE_SHEET" ON "C##CARGO_DEV"."ROUTE_SHEET" ("ID_ROUTE_SHEET") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_VEHICLE
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."PK_VEHICLE" ON "C##CARGO_DEV"."VEHICLE" ("ID_VEHICLE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UQ_CLIENT_BIC
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."UQ_CLIENT_BIC" ON "C##CARGO_DEV"."CLIENT" ("CLIENT_BIC") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UQ_CLIENT_ITN
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."UQ_CLIENT_ITN" ON "C##CARGO_DEV"."CLIENT" ("CLIENT_ITN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UQ_CLIENT_OKPO
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."UQ_CLIENT_OKPO" ON "C##CARGO_DEV"."CLIENT" ("CLIENT_OKPO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UQ_COMPLEXITY_LEVEL
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."UQ_COMPLEXITY_LEVEL" ON "C##CARGO_DEV"."COMPLEXITY" ("COMPLEXITY_LEVEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UQ_DRIVER_FFOMI
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."UQ_DRIVER_FFOMI" ON "C##CARGO_DEV"."DRIVER" ("DRIVER_FFOMI") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UQ_DRIVER_SNILS
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."UQ_DRIVER_SNILS" ON "C##CARGO_DEV"."DRIVER" ("DRIVER_SNILS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UQ_MANAGER_ITN
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."UQ_MANAGER_ITN" ON "C##CARGO_DEV"."MANAGER" ("MANAGER_ITN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UQ_MANAGER_SNILS
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##CARGO_DEV"."UQ_MANAGER_SNILS" ON "C##CARGO_DEV"."MANAGER" ("MANAGER_SNILS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Procedure CARGO_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."CARGO_DELETE" (p_ID_Cargo int)
    is p_Exists_Combination_Route_Sheet_Cargo smallint;
	begin
    select count(*) into p_Exists_Combination_Route_Sheet_Cargo from Combination_Route_Sheet_Cargo where Cargo_ID = p_ID_Cargo;
        if p_Exists_Combination_Route_Sheet_Cargo > 0 then
            DBMS_OUTPUT.PUT_LINE('Данные не могут быть удалены так как на них ссылаются значения из других таблиц');
        else
		    delete from Cargo where ID_Cargo = p_ID_Cargo;
        end if;
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."CARGO_DELETE" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."CARGO_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."CARGO_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure CARGO_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."CARGO_INSERT" (p_Cargo_Description varchar, p_Cargo_Width int, p_Cargo_Height int, p_Cargo_Length int, p_Cargo_Weight int, p_Cargo_Price int,  p_Request_ID int)
is
    p_Exists_Record smallint; 
    p_Exists_Request smallint;
	begin
    select count(*) into p_Exists_Record from Cargo where Cargo_Description = p_Cargo_Description
																	and Cargo_Width = p_Cargo_Width 
																	and p_Cargo_Height = Cargo_Height
																	and p_Cargo_Length = Cargo_Length
																	and p_Cargo_Weight = Cargo_Weight
																	and Cargo_price = p_Cargo_Price;
    select count(*) into p_Exists_Request from Request where ID_Request = p_Request_ID;
		if p_Exists_Request = 0 then 
			DBMS_OUTPUT.PUT_LINE('Введённой записи в таблице Заявка не существует');
		else 
			if p_Exists_Record > 0 then
				DBMS_OUTPUT.PUT_LINE('Введённый груз уже есть в базе');
			else
				if p_Cargo_Width < 0 or p_Cargo_Height < 0 or p_Cargo_Length < 0 or p_Cargo_Weight < 0 or p_Cargo_Price < 0 then
					DBMS_OUTPUT.PUT_LINE('Значения груза не могут быть отрицательными');
				else
					Insert into Cargo (Cargo_Description,	Cargo_Width,	Cargo_Height,	Cargo_Length,	Cargo_Weight,	Cargo_Price,	Request_ID)
						values (p_Cargo_Description, p_Cargo_Width, p_Cargo_Height,	p_Cargo_Length,	p_Cargo_Weight,	p_Cargo_Price,	p_Request_ID);
				end if;
			end if;
		end if;
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."CARGO_INSERT" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."CARGO_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."CARGO_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure CARGO_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."CARGO_UPDATE" (p_ID_Cargo int, p_Cargo_Description varchar, p_Cargo_Width int, p_Cargo_Height int, p_Cargo_Length int, p_Cargo_Weight int, p_Cargo_Price int,  p_Request_ID int)
	is
         p_Exists_ID smallint;
	 p_Exists_Record smallint;
	 p_Exists_Request smallint;
    begin


    select count(*) into p_Exists_ID from Cargo where ID_Cargo = p_ID_Cargo;
    select count(*) into p_Exists_Record from Cargo where Cargo_Description = p_Cargo_Description
																	and Cargo_Width = p_Cargo_Width 
																	and p_Cargo_Height = Cargo_Height
																	and p_Cargo_Length = Cargo_Length
																	and p_Cargo_Weight = Cargo_Weight
																	and Cargo_price = p_Cargo_Price;
    select count(*) into p_Exists_Request from Request where ID_Request = p_Request_ID;
		if p_Exists_ID = 0 then 
			DBMS_OUTPUT.PUT_LINE('Невозможно обновить таблицу. Груза с введёнными идентификатором нет');
		else
			if p_Exists_Record > 0 then 
				DBMS_OUTPUT.PUT_LINE('Введённый груз уже есть в базе');
			else 
				if p_Exists_Request = 0 then
					DBMS_OUTPUT.PUT_LINE('Введённой записи в таблице Заявка не существует');
				else
					if p_Cargo_Width < 0 or p_Cargo_Height < 0 or p_Cargo_Length < 0 or p_Cargo_Weight < 0 or p_Cargo_Price < 0 then
						DBMS_OUTPUT.PUT_LINE('Значения груза не могут быть отрицательными');
					else
					update cargo set
						Cargo_Description = p_Cargo_Description,
						Cargo_Width = p_Cargo_Width,
						Cargo_Height = p_Cargo_Height,
						Cargo_Length = p_Cargo_Length,
						Cargo_Weight = p_Cargo_Weight,
						Cargo_Price = p_Cargo_Price,
						Request_ID = p_Request_ID
							where ID_Cargo = p_ID_Cargo;
					end if;
				end if;
			end if;
		end if;
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."CARGO_UPDATE" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."CARGO_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."CARGO_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure CLIENT_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."CLIENT_DELETE" (p_ID_Client int)
is
    p_exists smallint;
	begin
    select count(*) into p_exists from request where Client_ID = p_ID_Client;
    if p_exists > 0 then
		DBMS_OUTPUT.PUT_LINE('Данные не могут быть удалены так как на них ссылаются значения из других таблиц');
	else
	  delete from client where ID_Client = p_ID_Client;
	end if;
	commit;

end;

/

  GRANT EXECUTE ON "C##CARGO_DEV"."CLIENT_DELETE" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."CLIENT_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."CLIENT_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure CLIENT_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."CLIENT_INSERT" (p_Client_Organization_Name varchar,p_Client_Legal_Address varchar,
									p_Client_Physical_Address varchar, p_Client_ITN varchar, p_Client_BIC varchar, p_Client_OKPO varchar,
									p_Client_Repr_Surname varchar, p_Client_Repr_Name varchar, p_Client_Repr_Second_Name varchar )
    is
    p_Exists_Record smallint;
	begin
        select count(*) into p_Exists_Record from Client where Client_ITN = p_Client_ITN and 
																   Client_BIC = p_Client_BIC and 
																   Client_OKPO = p_Client_OKPO;
		if p_Exists_Record > 0 then
			DBMS_OUTPUT.PUT_LINE('Клиент с введёнными данными уже есть в системе');
		else
			Insert into Client (Client_Organization_Name, Client_Legal_Address, Client_Physical_Address, Client_ITN, Client_BIC, Client_OKPO, Client_Repr_Surname, Client_Repr_Name, Client_Repr_Second_Name)
			values (p_Client_Organization_Name,p_Client_Legal_Address,
									p_Client_Physical_Address, p_Client_ITN, p_Client_BIC, p_Client_OKPO,
									p_Client_Repr_Surname, p_Client_Repr_Name, p_Client_Repr_Second_Name);
		end if;
		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."CLIENT_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."CLIENT_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure CLIENT_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."CLIENT_UPDATE" (p_ID_Client int,p_Client_Organization_Name varchar,p_Client_Legal_Address varchar,
									p_Client_Physical_Address varchar, p_Client_ITN varchar, p_Client_BIC varchar, p_Client_OKPO varchar,
									p_Client_Repr_Surname varchar, p_Client_Repr_Name varchar, p_Client_Repr_Second_Name varchar)
is
    p_Exists_Record smallint;
begin
    select count(*) into p_Exists_Record from Client where ID_Client = p_ID_Client;
		if p_Exists_Record = 0 then
			DBMS_OUTPUT.PUT_LINE('Невозможно обновить данные. Клиента с введёным идентификатором не существует');
		else
				update Client set
						Client_Organization_Name = p_Client_Organization_Name,
						Client_Legal_Address = p_Client_Legal_Address,
						Client_Physical_Address = p_Client_Physical_Address,
						Client_ITN = p_Client_ITN,
						Client_BIC = p_Client_BIC,
						Client_OKPO = p_Client_OKPO,
						Client_Repr_Surname = p_Client_Repr_Surname,
						Client_Repr_Name = p_Client_Repr_Name,
						Client_Repr_Second_Name = p_Client_Repr_Second_Name
							where ID_Client = p_ID_Client;
		end if;
		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
commit;

end;

/

  GRANT EXECUTE ON "C##CARGO_DEV"."CLIENT_UPDATE" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."CLIENT_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."CLIENT_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure COMBINATION_ROUTE_SHEET_CARGO_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO_DELETE" (p_ID_Combination_Route_Sheet_Cargo int)
	is
    begin
		delete from Combination_Route_Sheet_Cargo where ID_Combination_Route_Sheet_Cargo = p_ID_Combination_Route_Sheet_Cargo;
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure COMBINATION_ROUTE_SHEET_CARGO_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO_INSERT" (p_Route_Sheet_ID int, p_Cargo_ID int)
	is
     p_Exists_Record smallint;  
	 p_Exists_Route_Sheet smallint; 
	 p_Exists_Cargo smallint;

    begin
    select count(*) into p_Exists_Record from Combination_Route_Sheet_Cargo where Route_Sheet_ID = p_Route_Sheet_ID and 
																								 Cargo_ID = p_Cargo_ID;
    select count(*) into p_Exists_Route_Sheet from Route_Sheet where ID_Route_Sheet = p_Route_Sheet_ID;
    select count(*) into p_Exists_Cargo  from Cargo where ID_Cargo = p_Cargo_ID;
	if p_Exists_Record > 0 then
		DBMS_OUTPUT.PUT_LINE('Введённая запись уже есть в таблице');
	else
		if p_Exists_Route_Sheet = 0 then
			DBMS_OUTPUT.PUT_LINE('Введённой записи нету в таблице Маршрутный лист');
		else
			if p_Exists_Cargo = 0 then
				DBMS_OUTPUT.PUT_LINE('Введённой записи нету в таблице Точки доставки');
			else
				insert into Combination_Route_Sheet_Cargo(Route_Sheet_ID, Cargo_ID)
					values(p_Route_Sheet_ID, p_Cargo_ID);
			end if;
		end if;
	end if;
    		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure COMBINATION_ROUTE_SHEET_CARGO_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO_UPDATE" (p_ID_Combination_Route_Sheet_Cargo int, p_Route_Sheet_ID int, p_Cargo_ID int)
	 is
     p_Exists_ID smallint;  
     p_Exists_Record smallint;  
	 p_Exists_Route_Sheet smallint; 
	 p_Exists_Cargo smallint; 
    begin
    select count(*) into p_Exists_ID from Combination_Route_Sheet_Cargo where ID_Combination_Route_Sheet_Cargo = p_ID_Combination_Route_Sheet_Cargo;
    select count(*) into p_Exists_Record from Combination_Route_Sheet_Cargo where Route_Sheet_ID = p_Route_Sheet_ID and 
																								 Cargo_ID = p_Cargo_ID;
    select count(*) into p_Exists_Route_Sheet from Route_Sheet where ID_Route_Sheet = p_Route_Sheet_ID;
    select count(*) into p_Exists_Cargo  from Cargo where ID_Cargo = p_Cargo_ID;
	if p_Exists_ID = 0 then
		DBMS_OUTPUT.PUT_LINE('Невозможно обновить таблицу. Данных с введённым идентификатором нет');
	else
		if p_Exists_Record > 0 then
			DBMS_OUTPUT.PUT_LINE('Введённая запись уже есть в таблице');
		else
			if p_Exists_Route_Sheet = 0 then
				DBMS_OUTPUT.PUT_LINE('Введённой записи нету в таблице Маршрутный лист');
			else
				if p_Exists_Cargo = 0 then
					DBMS_OUTPUT.PUT_LINE('Введённой записи нету в таблице Точки доставки');
				else
					update Combination_Route_Sheet_Cargo set
						Route_Sheet_ID = p_Route_Sheet_ID,
						Cargo_ID = p_Cargo_ID
						where ID_Combination_Route_Sheet_Cargo = p_ID_Combination_Route_Sheet_Cargo;
				end if;
			 end if;
		 end if;
	 end if;
     		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure COMBINATION_ROUTE_SHEET_DELIVERY_POINT_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT_DELETE" (p_ID_Combination_Route_Sheet_Delivery_Point int)
is
	begin
		delete from Combination_Route_Sheet_Delivery_Point where ID_Combination_Route_Sheet_Delivery_Point = p_ID_Combination_Route_Sheet_Delivery_Point;
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure COMBINATION_ROUTE_SHEET_DELIVERY_POINT_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT_INSERT" (p_Route_Sheet_ID int, p_Delivery_Point_ID int)
    is
     p_Exists_Record smallint; 
	 p_Exists_Route_Sheet smallint; 
	 p_Exists_Delivery_Point smallint;
	begin
    select count(*) into p_Exists_Record from Combination_Route_Sheet_Delivery_Point where Route_Sheet_ID = p_Route_Sheet_ID and 
																								 Delivery_Point_ID = p_Delivery_Point_ID;
    select count(*) into p_Exists_Route_Sheet from Route_Sheet where ID_Route_Sheet = p_Route_Sheet_ID;
    select count(*) into p_Exists_Delivery_Point  from Delivery_Point where ID_Delivery_Point = p_Delivery_Point_ID;
	if p_Exists_Record > 0 then
		DBMS_OUTPUT.PUT_LINE('Введённая запись уже есть в таблице');
	else
		if p_Exists_Route_Sheet = 0 then
			DBMS_OUTPUT.PUT_LINE('Введённой записи нету в таблице Маршрутный лист');
		else
			if p_Exists_Delivery_Point = 0 then
				DBMS_OUTPUT.PUT_LINE('Введённой записи нету в таблице Точки доставки');
			else
				insert into Combination_Route_Sheet_Delivery_Point(Route_Sheet_ID, Delivery_Point_ID)
					values(p_Route_Sheet_ID, p_Delivery_Point_ID);
			end if;
		end if;
	end if;
    		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure COMBINATION_ROUTE_SHEET_DELIVERY_POINT_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT_UPDATE" (p_ID_Combination_Route_Sheet_Delivery_Point int, p_Route_Sheet_ID int, p_Delivery_Point_ID int)
	is
     p_Exists_ID smallint;
     p_Exists_Record smallint; 
	 p_Exists_Route_Sheet smallint; 
	 p_Exists_Delivery_Point smallint;
    begin
    select count(*) into p_Exists_ID  from Combination_Route_Sheet_Delivery_Point where ID_Combination_Route_Sheet_Delivery_Point = p_ID_Combination_Route_Sheet_Delivery_Point;
    select count(*) into p_Exists_Record from Combination_Route_Sheet_Delivery_Point where Route_Sheet_ID = p_Route_Sheet_ID and 
																								 Delivery_Point_ID = p_Delivery_Point_ID;
    select count(*) into p_Exists_Route_Sheet from Route_Sheet where ID_Route_Sheet = p_Route_Sheet_ID;
    select count(*) into p_Exists_Delivery_Point  from Delivery_Point where ID_Delivery_Point = p_Delivery_Point_ID;
	if p_Exists_ID = 0 then
		DBMS_OUTPUT.PUT_LINE('Невозможно обновить таблицу. Данных с введённым идентификатором нет');
	else
		if p_Exists_Record > 0 then
			DBMS_OUTPUT.PUT_LINE('Введённая запись уже есть в таблице');
		else
			if p_Exists_Route_Sheet = 0 then
				DBMS_OUTPUT.PUT_LINE('Введённой записи нету в таблице Маршрутный лист');
			else
				if p_Exists_Delivery_Point = 0 then
					DBMS_OUTPUT.PUT_LINE('Введённой записи нету в таблице Точки доставки');
				else
					update Combination_Route_Sheet_Delivery_Point set
						Route_Sheet_ID = p_Route_Sheet_ID,
						Delivery_Point_ID = p_Delivery_Point_ID
						where ID_Combination_Route_Sheet_Delivery_Point = p_ID_Combination_Route_Sheet_Delivery_Point;
				end if;
			 end if;
		 end if;
	 end if;
     		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure COMPLEXITY_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."COMPLEXITY_DELETE" (p_ID_Complexity int)
    is 
    p_Exists_Record smallint;
	begin
    select count(*) into p_Exists_Record from Route_Sheet where Complexity_ID = p_ID_Complexity;
        if p_Exists_Record > 0 then
            DBMS_OUTPUT.PUT_LINE('Данные не могут быть удалены так как на них ссылаются значения из других таблиц');
        else
		    delete from Complexity where ID_Complexity = p_ID_Complexity;
        end if;
	commit;

end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."COMPLEXITY_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."COMPLEXITY_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure COMPLEXITY_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."COMPLEXITY_INSERT" (p_Complexity_Level int)
is
	begin
		if p_Complexity_Level < 0 then
			DBMS_OUTPUT.PUT_LINE('Уровень сложности не может быть отрицательным');
		else
			insert into complexity(complexity_Level)
				values(p_Complexity_Level);
		end if;
        exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."COMPLEXITY_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."COMPLEXITY_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure COMPLEXITY_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."COMPLEXITY_UPDATE" (p_ID_Complexity int, p_Complexity_Level int)
is
    p_Exists_Record smallint;
	begin
    select count(*) into p_Exists_Record from complexity where ID_Complexity = p_ID_Complexity;
	if p_Exists_Record = 0 then
		DBMS_OUTPUT.PUT_LINE('Невозможно обновить сложность. Сложности с введённым идентификатором не существует');
	else
		if p_Complexity_Level < 0 then
			DBMS_OUTPUT.PUT_LINE('Уровень сложности не может быть отрицательным');
		else
			update complexity set 
                complexity_level = p_Complexity_Level
                where ID_Complexity = p_ID_Complexity;
		end if;
	end if;
    exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."COMPLEXITY_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."COMPLEXITY_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure DELIVERY_POINT_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."DELIVERY_POINT_DELETE" (p_ID_Delivery_Point int)
is
    p_Exists_Combination_Route_Sheet_Delivery_Point smallint;
	begin
    select count(*) into p_Exists_Combination_Route_Sheet_Delivery_Point from Combination_Route_Sheet_Delivery_Point where Delivery_Point_ID = p_ID_Delivery_Point; 
    if p_Exists_Combination_Route_Sheet_Delivery_Point > 0 then
        DBMS_OUTPUT.PUT_LINE('Данные не могут быть удалены так как на них ссылаются значения из других таблиц');
    else
		delete from Delivery_Point where ID_Delivery_Point = p_ID_Delivery_Point;
	end if;
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."DELIVERY_POINT_DELETE" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."DELIVERY_POINT_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."DELIVERY_POINT_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure DELIVERY_POINT_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."DELIVERY_POINT_INSERT" (p_Request_ID int, p_Delivery_Point_Destination varchar) 
    is
     p_Exists_Record smallint;
     p_Exists_Request smallint;
	begin
    select count(*) into p_Exists_Request from Request where ID_Request = p_Request_ID;
    select count(*) into p_Exists_Record from Delivery_Point where Request_ID = p_Request_ID and Delivery_Point_Destination = p_Delivery_Point_Destination;
		if p_Exists_Request = 0 then
			DBMS_OUTPUT.PUT_LINE('Введённой записи в таблице Заявка не существует');
		else
            if p_Exists_Record > 0 then
                DBMS_OUTPUT.PUT_LINE('Введённая запись уже есть в таблице');
            else
                insert into Delivery_Point(Request_ID, Delivery_Point_Destination)
                    values(p_Request_ID, p_Delivery_Point_Destination);
            end if;
		end if;
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."DELIVERY_POINT_INSERT" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."DELIVERY_POINT_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."DELIVERY_POINT_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure DELIVERY_POINT_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."DELIVERY_POINT_UPDATE" (p_ID_Delivery_Point int, p_Delivery_Point_Mark varchar ,p_Request_ID int, p_Delivery_Point_Destination varchar)
is
         p_Exists_ID smallint; 
     p_Exists_Record smallint;
	 p_Exists_Request smallint;
	begin

    select count(*) into p_Exists_ID from Delivery_Point where ID_Delivery_Point = p_ID_Delivery_Point;
    select count(*) into p_Exists_Request from Request where ID_Request = p_Request_ID;
    select count(*) into p_Exists_Record from Delivery_Point where Request_ID = p_Request_ID and Delivery_Point_Destination = p_Delivery_Point_Destination;
		if p_Exists_ID = 0 then
			DBMS_OUTPUT.PUT_LINE('Невозможно обновить данные. Точки доставки с введённым идентификатором не существует');
		else
			if p_Exists_Request = 0 then
				DBMS_OUTPUT.PUT_LINE('Введённой записи в таблице Заявка не существует');
			else
                if p_Exists_Record > 0 then
                    DBMS_OUTPUT.PUT_LINE('Введённая запись уже есть в таблице');
                else
                    update delivery_Point set
                        Delivery_Point_Mark = p_Delivery_Point_Mark,
                        Request_ID = p_Request_ID,
                        Delivery_Point_Destination = p_Delivery_Point_Destination
                            where ID_Delivery_Point = p_ID_Delivery_Point;
                end if;
			end if;
		end if;
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."DELIVERY_POINT_UPDATE" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."DELIVERY_POINT_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."DELIVERY_POINT_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure DRIVER_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."DRIVER_DELETE" (p_ID_Driver int)
    is
    p_Exists_Record smallint;
	begin
    select count(*) into p_Exists_Record from Route_Sheet where Driver_ID = p_ID_Driver;
        if p_Exists_Record > 0 then
            DBMS_OUTPUT.PUT_LINE('Данные не могут быть удалены так как на них ссылаются значения из других таблиц');
        else
		    delete from Driver where ID_Driver = p_ID_Driver;
        end if;
	commit;

end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."DRIVER_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."DRIVER_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure DRIVER_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."DRIVER_INSERT" (p_Driver_Passport_Series varchar,p_Driver_Passport_Number varchar,p_Driver_SNILS varchar,
										   p_Driver_FFOMI varchar,p_Driver_License_Series varchar,p_Driver_License_Number varchar,
										  p_Driver_Surname varchar, p_Driver_Name varchar, p_Driver_Second_Name varchar)
    is
        p_Exists_Record smallint; 
	begin
    select count(*) into p_Exists_Record from Driver where Driver_SNILS = p_Driver_SNILS and Driver_FFOMI = p_Driver_FFOMI;
	if p_Exists_Record > 0 then 
		DBMS_OUTPUT.PUT_LINE('Водитель с введёнными данными есть в системе');
	else
		Insert into Driver (Driver_Passport_Series,	Driver_Passport_Number,	Driver_Snils,	Driver_FFOMI,	Driver_License_Series,	Driver_License_Number,	Driver_Surname,	Driver_Name,	Driver_Second_Name)
		values (p_Driver_Passport_Series,	p_Driver_Passport_Number,	p_Driver_Snils,	p_Driver_FFOMI,	p_Driver_License_Series,	p_Driver_License_Number,	p_Driver_Surname,	p_Driver_Name,	p_Driver_Second_Name);
	end if;
    		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."DRIVER_INSERT" TO "C##DRIVER";
  GRANT EXECUTE ON "C##CARGO_DEV"."DRIVER_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."DRIVER_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure DRIVER_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."DRIVER_UPDATE" (p_ID_Driver int,p_Driver_Passport_Series varchar,p_Driver_Passport_Number varchar,p_Driver_SNILS varchar,
										   p_Driver_FFOMI varchar,p_Driver_License_Series varchar,p_Driver_License_Number varchar,
										  p_Driver_Surname varchar, p_Driver_Name varchar, p_Driver_Second_Name varchar)
    is 
    p_Exists_Record smallint;
	begin

    select count(*) into  p_Exists_Record from Driver where ID_Driver = p_ID_Driver;
	if p_Exists_Record = 0 then 
		DBMS_OUTPUT.PUT_LINE('Невозможно обновить данные. Водителя с введёным идентификатором не существует');
	else
		update Driver set 
		Driver_Passport_Series = p_Driver_Passport_Series,	
		Driver_Passport_Number = p_Driver_Passport_Number,	
		Driver_Snils = p_Driver_Snils,
		Driver_FFOMI = p_Driver_FFOMI,	
		Driver_License_Series = p_Driver_License_Series,
		Driver_License_Number = p_Driver_License_Number,	
		Driver_Surname = p_Driver_Surname,
		Driver_Name = p_Driver_Name,	
		Driver_Second_Name = p_Driver_Second_Name
			where ID_Driver = p_ID_Driver;

	end if;
    		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."DRIVER_UPDATE" TO "C##DRIVER";
  GRANT EXECUTE ON "C##CARGO_DEV"."DRIVER_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."DRIVER_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure MANAGER_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."MANAGER_DELETE" (p_ID_Manager int)
is
    p_Exists_Record smallint;
	begin
    select count(*) into p_Exists_Record from Request where Manager_ID = p_ID_Manager;
    if p_Exists_Record > 0 then
        DBMS_OUTPUT.PUT_LINE('Данные не могут быть удалены так как на них ссылаются значения из других таблиц');
    else
		delete from Manager where ID_Manager = p_ID_Manager;
	end if;
	commit;

end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."MANAGER_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure MANAGER_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."MANAGER_INSERT" (p_Manager_Surname varchar, p_Manager_Name varchar, p_Manager_Second_Name varchar,
										p_Manager_Passport_Series varchar, p_Manager_Passport_Number varchar, p_Manager_ITN varchar, 
											p_Manager_SNILS varchar)

    is
    p_Exists_Record smallint; 
	begin
        select count(*)  into p_Exists_Record from Manager where Manager_ITN = p_Manager_ITN and Manager_SNILS = p_Manager_SNILS;
		if p_Exists_Record > 0 then
			DBMS_OUTPUT.PUT_LINE('Менеджер с введёнными данными уже есть в системе');

		else
				Insert into Manager (Manager_Surname, Manager_Name, Manager_Second_Name,	Manager_Passport_Series,	Manager_Passport_Number,	Manager_ITN, Manager_SNILS)
				values (p_Manager_Surname, p_Manager_Name, p_Manager_Second_Name,	p_Manager_Passport_Series,	p_Manager_Passport_Number,	p_Manager_ITN, p_Manager_SNILS);
		end if;
		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end;

/

  GRANT EXECUTE ON "C##CARGO_DEV"."MANAGER_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure MANAGER_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."MANAGER_UPDATE" (p_ID_Manager int, p_Manager_Surname varchar, p_Manager_Name varchar, p_Manager_Second_Name varchar,
										   p_Manager_Passport_Series varchar, p_Manager_Passport_Number varchar, p_Manager_ITN varchar, 
											P_Manager_SNILS varchar)
    is
    	p_Exists_Record smallint;
	begin
    select count(*) into p_Exists_Record from Manager where ID_Manager = p_ID_Manager;
		if p_Exists_Record = 0 then
			DBMS_OUTPUT.PUT_LINE('Невозможно обновить данные. Менеджера с введёным идентификатором не существует');

		else
				update Manager set
					Manager_Surname = p_Manager_Surname,
					Manager_Name = p_Manager_Name,
					Manager_Second_Name = p_Manager_Second_Name,
					Manager_Passport_Series = p_Manager_Passport_Series,
					Manager_Passport_Number = p_Manager_Passport_Number,
					Manager_ITN = p_Manager_ITN,
					Manager_SNILS = p_Manager_SNILS
						where ID_Manager = p_ID_Manager;
		end if;
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."MANAGER_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."MANAGER_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure REQUEST_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."REQUEST_DELETE" (p_ID_Request int)
is
    p_Exists_Cargo smallint;
    p_Exists_Delivery_Point smallint;
	begin
    select count(*) into p_Exists_Cargo from Cargo where Request_ID = p_ID_Request;
    select count(*) into p_Exists_Delivery_Point from Delivery_Point where Request_ID = p_ID_Request;
    if p_Exists_Cargo > 0 or p_Exists_Delivery_Point > 0 then
        DBMS_OUTPUT.PUT_LINE('Данные не могут быть удалены так как на них ссылаются значения из других таблиц');
    else
		delete from Request where ID_Request = p_ID_Request;
    end if;
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."REQUEST_DELETE" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."REQUEST_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."REQUEST_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure REQUEST_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."REQUEST_INSERT" (p_Request_Number varchar, p_Manager_ID int, p_Client_ID int)    
is
	 p_Exists_Record smallint;
	 p_Request_Number_New varchar(8);
	 p_Client_Exists smallint;
	 p_Manager_Exists smallint;
	begin
    p_Request_Number_New := p_Request_Number;
    select count(*) into p_Client_Exists from Client where ID_Client = p_Client_ID;
    select count(*) into p_Manager_Exists from Manager where ID_Manager = p_Manager_ID;
    while length(p_Request_Number_New) < 8
    loop
		p_Request_Number_New := CONCAT('0',p_Request_Number_New);
	end loop;
    select count(*) into p_Exists_Record from Request where Request_Number = p_Request_Number_New;
		if p_Exists_Record > 0 then
			DBMS_OUTPUT.PUT_LINE('Запись с данным номером уже есть в таблице');
		else
			if p_Client_Exists = 0 then
				DBMS_OUTPUT.PUT_LINE('Клиента с указанным идентификатором нет');
			else
				if p_Manager_Exists = 0 then 
					DBMS_OUTPUT.PUT_LINE('Менеджера с указанным идентификатором нет');
				else
					insert into Request(Request_Number, Manager_ID, Client_ID)
						values(p_Request_Number_New, p_Manager_ID, p_Client_ID);
				end if;
			end if;
		end if; 
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end;

/

  GRANT EXECUTE ON "C##CARGO_DEV"."REQUEST_INSERT" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."REQUEST_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."REQUEST_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure REQUEST_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."REQUEST_UPDATE" (p_ID_Request int, p_Request_Number varchar, p_Manager_ID int, p_Client_ID int)
    is
     p_Exists_ID smallint;
	 p_Exists_Record smallint;
	 p_Request_Number_New varchar(8);
	 p_Client_Exists smallint;
	 p_Manager_Exists smallint;
	begin
    p_Request_Number_New := p_Request_Number;
    select count(*) into p_Exists_ID from Request where ID_Request = p_ID_Request;
    select count(*) into p_Client_Exists from Client where ID_Client = p_Client_ID;
    select count(*) into p_Manager_Exists from Manager where ID_Manager = p_Manager_ID;
    while length(p_Request_Number_New) < 8
    loop
		p_Request_Number_New := CONCAT('0',p_Request_Number_New);
	end loop;
    select count(*) into p_Exists_Record from Request where Request_Number = p_Request_Number_New;
		if p_Exists_Record > 0 then
			DBMS_OUTPUT.PUT_LINE('Запись с данным номером уже есть в таблице');
		else
			if p_Exists_ID = 0 then
				DBMS_OUTPUT.PUT_LINE('Невозможно обновить данные. Заявки с данным идентификатором не существует');
			else
				if p_Client_Exists = 0 then
					DBMS_OUTPUT.PUT_LINE('Клиента с указанным идентификатором нет');
				else
					if p_Manager_Exists = 0 then 
						DBMS_OUTPUT.PUT_LINE('Менеджера с указанным идентификатором нет');
					else
						update Request set
							Request_Number = p_Request_Number_New,
							Client_ID = p_Client_ID,
							Manager_ID = p_Manager_ID
								where ID_Request = p_ID_Request;
					end if;
				end if;
			end if;
		end if;
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."REQUEST_UPDATE" TO "C##CLIENT";
  GRANT EXECUTE ON "C##CARGO_DEV"."REQUEST_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."REQUEST_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure ROUTE_SHEET_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."ROUTE_SHEET_DELETE" (p_ID_Route_Sheet int)
    is
    p_Exists_Combination_Route_Sheet_Delivery_Point smallint;
    p_Exists_Combination_Route_Sheet_Cargo smallint;
	begin
    select count(*) into p_Exists_Combination_Route_Sheet_Delivery_Point from Combination_Route_Sheet_Delivery_Point where Route_Sheet_ID = p_ID_Route_Sheet;
    select count(*) into p_Exists_Combination_Route_Sheet_Cargo from Combination_Route_Sheet_Cargo where Route_Sheet_ID = p_ID_Route_Sheet;
        if p_Exists_Combination_Route_Sheet_Cargo > 0 or p_Exists_Combination_Route_Sheet_Cargo > 0 then
            DBMS_OUTPUT.PUT_LINE('Данные не могут быть удалены так как на них ссылаются значения из других таблиц');
        else
		    delete from Route_Sheet where ID_Route_Sheet = p_ID_Route_Sheet;
        end if;
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."ROUTE_SHEET_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."ROUTE_SHEET_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure ROUTE_SHEET_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."ROUTE_SHEET_INSERT" (p_Route_Sheet_Number varchar, p_Complexity_ID int, p_Vehicle_ID int, p_Driver_ID int)
is
     p_Exists_Record smallint;
	 p_Route_Sheet_Number_New varchar(8);
	 p_Complexity_Exists smallint;  
	 p_Vehicle_Exists smallint;  
	 p_Driver_Exists smallint;
	begin

    p_Route_Sheet_Number_New := p_Route_Sheet_Number;
    select count(*) into p_Complexity_Exists from Complexity where ID_Complexity = p_Complexity_ID;
    select count(*) into p_Vehicle_Exists from Vehicle where ID_Vehicle = p_Vehicle_ID;
    select count(*) into p_Driver_Exists from Driver where ID_Driver = p_Driver_ID;
		while LENGTH(p_Route_Sheet_Number_New) < 8
        loop
			p_Route_Sheet_Number_New := CONCAT('0',p_Route_Sheet_Number_New);
		end loop;
		select count(*) into p_Exists_Record from Route_Sheet where Route_Sheet_Number = p_Route_Sheet_Number_New;
		if p_Exists_Record > 0 then
			DBMS_OUTPUT.PUT_LINE('Запись с данным номером уже есть в таблице');
		else
			if p_Complexity_Exists = 0 then
				DBMS_OUTPUT.PUT_LINE('Сложности с указанным идентификатором нет');
			else
				if p_Vehicle_Exists = 0 then
					DBMS_OUTPUT.PUT_LINE('Автомобиля с указанным идентификатором нет');
				else
					if p_Driver_Exists = 0 then
						DBMS_OUTPUT.PUT_LINE('Водителя с указанным идентификатором нет');
					else
						insert into Route_Sheet(Route_Sheet_Number,Complexity_ID,Vehicle_ID,Driver_ID)
							values(p_Route_Sheet_Number_New, p_Complexity_ID, p_Vehicle_ID, p_Driver_ID);
					end if;
				end if;
			end if;
		end if;
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."ROUTE_SHEET_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."ROUTE_SHEET_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure ROUTE_SHEET_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."ROUTE_SHEET_UPDATE" (p_ID_Route_Sheet int, p_Route_Sheet_Number varchar, p_Complexity_ID int, p_Vehicle_ID int, p_Driver_ID int)
    is
     p_Exists_ID smallint; 
     p_Exists_Record smallint;
	 p_Route_Sheet_Number_New varchar(8);
	 p_Complexity_Exists smallint;  
	 p_Vehicle_Exists smallint;  
	 p_Driver_Exists smallint; 
	begin
    select count(*) into p_Exists_ID from Route_Sheet where ID_Route_Sheet = p_ID_Route_Sheet;
    p_Route_Sheet_Number_New := p_Route_Sheet_Number;
    select count(*) into p_Complexity_Exists from Complexity where ID_Complexity = p_Complexity_ID;
    select count(*) into p_Vehicle_Exists from Vehicle where ID_Vehicle = p_Vehicle_ID;
    select count(*) into p_Driver_Exists from Driver where ID_Driver = p_Driver_ID;
    while LENGTH(p_Route_Sheet_Number_New) < 8
    loop
		p_Route_Sheet_Number_New := CONCAT('0',p_Route_Sheet_Number_New);
	end loop;
	select count(*) into p_Exists_Record from Route_Sheet where Route_Sheet_Number = p_Route_Sheet_Number_New;
		if p_Exists_ID = 0 then
			DBMS_OUTPUT.PUT_LINE('Невозможно обновить данные. Маршрутного листа с введённым идентификатором не существует');
		else
			if p_Exists_Record > 0 then
				DBMS_OUTPUT.PUT_LINE('Запись с данным номером уже есть в таблице');
			else
				if p_Complexity_Exists = 0 then
					DBMS_OUTPUT.PUT_LINE('Сложности с указанным идентификатором нет');
				else
					if p_Vehicle_Exists = 0 then
						DBMS_OUTPUT.PUT_LINE('Автомобиля с указанным идентификатором нет');
					else
						if p_Driver_Exists = 0 then
							DBMS_OUTPUT.PUT_LINE('Водителя с указанным идентификатором нет');
						else
							update Route_Sheet set 
								Route_Sheet_Number = p_Route_Sheet_Number_New,
								Complexity_ID = p_Complexity_ID,
								Vehicle_ID = p_Vehicle_ID,
								Driver_ID = p_Driver_ID
									where ID_Route_Sheet = p_ID_Route_Sheet;
						end if;
					 end if;
				 end if;
			 end if;
		 end if;
         		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."ROUTE_SHEET_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."ROUTE_SHEET_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure VEHICLE_DELETE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."VEHICLE_DELETE" (p_ID_Vehicle int)
    is
        p_Exists_Record  smallint;
	begin
    select count(*) into p_Exists_Record from Route_Sheet where Vehicle_ID = p_ID_Vehicle;
        if p_Exists_Record > 0 then
            DBMS_OUTPUT.PUT_LINE('Данные не могут быть удалены так как на них ссылаются значения из других таблиц');
        else
		    delete from Vehicle where ID_Vehicle = p_ID_Vehicle;
        end if;
	commit;

end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."VEHICLE_DELETE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."VEHICLE_DELETE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure VEHICLE_INSERT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."VEHICLE_INSERT" (p_Vehicle_Width int, p_Vehicle_Height int, p_Vehicle_Length int, p_Vehicle_Capacity int, p_Vehicle_State_Number varchar)


	is
         p_Exists_Record  smallint;
	begin
    select count(*) into p_Exists_Record from Vehicle where Vehicle_State_Number = p_Vehicle_State_Number;
		if p_Exists_Record > 0 then
			DBMS_OUTPUT.PUT_LINE('Автомобиль с введёнными данными есть в системе');
		else
			if p_Vehicle_Width < 0 or p_Vehicle_Height < 0 or p_Vehicle_Length < 0 or p_Vehicle_Capacity < 0 then
				DBMS_OUTPUT.PUT_LINE('Параметры автомобиля не могут быть отрицательными');
			else
				Insert into Vehicle (Vehicle_Width, Vehicle_Height, Vehicle_Length, Vehicle_Capacity, Vehicle_State_Number)
				values (p_Vehicle_Width, p_Vehicle_Height, p_Vehicle_Length, p_Vehicle_Capacity, p_Vehicle_State_Number);
			end if;
		end if;
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."VEHICLE_INSERT" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."VEHICLE_INSERT" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Procedure VEHICLE_UPDATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##CARGO_DEV"."VEHICLE_UPDATE" (p_ID_Vehicle int, p_Vehicle_Width int, p_Vehicle_Height int, p_Vehicle_Length int, p_Vehicle_Capacity int, p_Vehicle_State_Number varchar)
	is
        p_Exists_Record  smallint;
    begin

    select count(*) into p_Exists_Record from Vehicle where ID_Vehicle = p_ID_Vehicle;
		if p_Exists_Record = 0 then
			DBMS_OUTPUT.PUT_LINE('Невозможно обновить данные. Автомобиля с введёным идентификатором не существует');
		else
			if p_Vehicle_Width < 0 or p_Vehicle_Height < 0 or p_Vehicle_Length < 0 or p_Vehicle_Capacity < 0 then
				DBMS_OUTPUT.PUT_LINE('Параметры автомобиля не могут быть отрицательными');
			else
				update Vehicle set
					Vehicle_Width= p_Vehicle_Width, 
					Vehicle_Height= p_Vehicle_Height, 
					Vehicle_Length= p_Vehicle_Length, 
					Vehicle_Capacity= p_Vehicle_Capacity, 
					Vehicle_State_Number= p_Vehicle_State_Number
						where ID_Vehicle = p_ID_Vehicle;
			end if;
		end if;
        		exception 
        when VALUE_ERROR then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. Проверьте правильность заполнения полей и повторите попытку');
		when DUP_VAL_ON_INDEX then
			DBMS_OUTPUT.PUT_LINE('Введённые данные не являются уникальными');
		when others then 
			DBMS_OUTPUT.PUT_LINE('Данные не могут быть добавлены. ' || SQLERRM);
	end; 

/

  GRANT EXECUTE ON "C##CARGO_DEV"."VEHICLE_UPDATE" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."VEHICLE_UPDATE" TO "C##GC_ADMIN";
--------------------------------------------------------
--  DDL for Function CHOOSE_VEHICLE_FOR_CARGO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "C##CARGO_DEV"."CHOOSE_VEHICLE_FOR_CARGO" (p_ID_Request int)
return varchar
is 
    p_Cargo_Width int;
	p_Cargo_Height int;
	p_Cargo_Length int;
	p_vehicle_state_number varchar(30);
	Cursor_Width int;
    Cursor_Height int;
    Cursor_Length int;
	i int;
    counter int;
	cursor cursor_i is select Vehicle_Width, Vehicle_Height, Vehicle_Length from Vehicle;
	begin
		select sum(cargo_width) into p_Cargo_Width  from Cargo where Request_ID = p_ID_Request;
		select sum(cargo_height) into p_Cargo_Height  from Cargo where Request_ID = p_ID_Request;
		select sum(cargo_length) into p_Cargo_Length  from Cargo where Request_ID = p_ID_Request;
        select count(*) into counter from vehicle;
		open cursor_i;
        i := 1;
		while i <= counter loop
        	fetch cursor_i into Cursor_Width, Cursor_Height, Cursor_Length;
				if p_Cargo_Width <= Cursor_Width and p_Cargo_Height <= Cursor_Height and p_Cargo_Length <= Cursor_Length then
					select Vehicle_State_Number into p_vehicle_state_number from Vehicle where 
                    Vehicle_Width = Cursor_Width and Vehicle_Height = Cursor_Height and Vehicle_Length = Cursor_Length fetch first 1 rows only;
					        return p_vehicle_state_number;
			end if;
            i := i + 1;
		end loop;
        return 'Невозможно распределить груз';
	end;

/

  GRANT EXECUTE ON "C##CARGO_DEV"."CHOOSE_VEHICLE_FOR_CARGO" TO "C##MANAGER";
  GRANT EXECUTE ON "C##CARGO_DEV"."CHOOSE_VEHICLE_FOR_CARGO" TO "C##GC_ADMIN";
--------------------------------------------------------
--  Constraints for Table VEHICLE
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."VEHICLE" MODIFY ("ID_VEHICLE" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."VEHICLE" MODIFY ("VEHICLE_WIDTH" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."VEHICLE" MODIFY ("VEHICLE_HEIGHT" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."VEHICLE" MODIFY ("VEHICLE_LENGTH" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."VEHICLE" MODIFY ("VEHICLE_CAPACITY" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."VEHICLE" MODIFY ("VEHICLE_STATE_NUMBER" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."VEHICLE" ADD CONSTRAINT "CH_VEHICLE_STATE_NUMBER" CHECK (regexp_like(Vehicle_State_Number, '[А-Я]{2}[0-9]{3}[А-Я] [0-9]{2,3}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."VEHICLE" ADD CONSTRAINT "PK_VEHICLE" PRIMARY KEY ("ID_VEHICLE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COMBINATION_ROUTE_SHEET_DELIVERY_POINT
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT" MODIFY ("ID_COMBINATION_ROUTE_SHEET_DELIVERY_POINT" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT" MODIFY ("ROUTE_SHEET_ID" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT" MODIFY ("DELIVERY_POINT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CARGO
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."CARGO" MODIFY ("ID_CARGO" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CARGO" MODIFY ("CARGO_DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CARGO" MODIFY ("REQUEST_ID" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CARGO" MODIFY ("CARGO_WIDTH" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CARGO" MODIFY ("CARGO_HEIGHT" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CARGO" MODIFY ("CARGO_LENGTH" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CARGO" MODIFY ("CARGO_WEIGHT" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CARGO" ADD CONSTRAINT "PK_CARGO" PRIMARY KEY ("ID_CARGO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DRIVER
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."DRIVER" MODIFY ("ID_DRIVER" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DRIVER" MODIFY ("DRIVER_SURNAME" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DRIVER" MODIFY ("DRIVER_NAME" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DRIVER" MODIFY ("DRIVER_PASSPORT_SERIES" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DRIVER" MODIFY ("DRIVER_PASSPORT_NUMBER" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DRIVER" MODIFY ("DRIVER_SNILS" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DRIVER" MODIFY ("DRIVER_FFOMI" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DRIVER" MODIFY ("DRIVER_LICENSE_SERIES" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DRIVER" MODIFY ("DRIVER_LICENSE_NUMBER" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DRIVER" ADD CONSTRAINT "CH_DRIVER_SNILS" CHECK (regexp_like(Driver_SNILS, '[0-9]{3}-[0-9]{3}-[0-9]{3} [0-9][0-9]')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."DRIVER" ADD CONSTRAINT "CH_DRIVER_FFOMI" CHECK (regexp_like(Driver_FFOMI, '[0-9]{16}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."DRIVER" ADD CONSTRAINT "CH_DRIVER_PASSPORT_SERIES" CHECK (regexp_like(Driver_Passport_Series, '[0-9]{4}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."DRIVER" ADD CONSTRAINT "CH_DRIVER_PASSPORT_NUMBER" CHECK (regexp_like(Driver_Passport_Number, '[0-9]{6}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."DRIVER" ADD CONSTRAINT "CH_DRIVER_LICENSE_SERIES" CHECK (regexp_like(Driver_License_Series, '[0-9]{4}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."DRIVER" ADD CONSTRAINT "CH_DRIVER_LICENSE_NUMBER" CHECK (regexp_like(Driver_License_Number, '[0-9]{6}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."DRIVER" ADD CONSTRAINT "UQ_DRIVER_SNILS" UNIQUE ("DRIVER_SNILS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##CARGO_DEV"."DRIVER" ADD CONSTRAINT "UQ_DRIVER_FFOMI" UNIQUE ("DRIVER_FFOMI")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##CARGO_DEV"."DRIVER" ADD CONSTRAINT "PK_DRIVER" PRIMARY KEY ("ID_DRIVER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ROUTE_SHEET
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."ROUTE_SHEET" MODIFY ("ID_ROUTE_SHEET" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."ROUTE_SHEET" MODIFY ("COMPLEXITY_ID" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."ROUTE_SHEET" MODIFY ("VEHICLE_ID" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."ROUTE_SHEET" MODIFY ("DRIVER_ID" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."ROUTE_SHEET" ADD CONSTRAINT "PK_ROUTE_SHEET" PRIMARY KEY ("ID_ROUTE_SHEET")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CLIENT
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."CLIENT" MODIFY ("ID_CLIENT" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CLIENT" MODIFY ("CLIENT_ORGANIZATION_NAME" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CLIENT" MODIFY ("CLIENT_PHYSICAL_ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CLIENT" MODIFY ("CLIENT_ITN" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CLIENT" MODIFY ("CLIENT_BIC" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CLIENT" MODIFY ("CLIENT_OKPO" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CLIENT" MODIFY ("CLIENT_REPR_SURNAME" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CLIENT" MODIFY ("CLIENT_REPR_NAME" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."CLIENT" ADD CONSTRAINT "CH_CLIENT_ITN" CHECK (regexp_like(Client_ITN, '[0-9]{10}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."CLIENT" ADD CONSTRAINT "CH_CLIENT_BIC" CHECK (regexp_like(Client_BIC, '[0-9]{9}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."CLIENT" ADD CONSTRAINT "CH_CLIENT_OKPO" CHECK (regexp_like(Client_OKPO, '[0-9]{8}|[0-9]{10}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."CLIENT" ADD CONSTRAINT "UQ_CLIENT_ITN" UNIQUE ("CLIENT_ITN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##CARGO_DEV"."CLIENT" ADD CONSTRAINT "UQ_CLIENT_BIC" UNIQUE ("CLIENT_BIC")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##CARGO_DEV"."CLIENT" ADD CONSTRAINT "UQ_CLIENT_OKPO" UNIQUE ("CLIENT_OKPO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##CARGO_DEV"."CLIENT" ADD CONSTRAINT "PK_CLIENT" PRIMARY KEY ("ID_CLIENT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table REQUEST
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."REQUEST" MODIFY ("ID_REQUEST" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."REQUEST" MODIFY ("MANAGER_ID" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."REQUEST" MODIFY ("CLIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."REQUEST" ADD CONSTRAINT "PK_REQUEST" PRIMARY KEY ("ID_REQUEST")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COMBINATION_ROUTE_SHEET_CARGO
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO" MODIFY ("ID_COMBINATION_ROUTE_SHEET_CARGO" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO" MODIFY ("ROUTE_SHEET_ID" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO" MODIFY ("CARGO_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MANAGER
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."MANAGER" MODIFY ("ID_MANAGER" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."MANAGER" MODIFY ("MANAGER_SURNAME" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."MANAGER" MODIFY ("MANAGER_NAME" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."MANAGER" MODIFY ("MANAGER_PASSPORT_SERIES" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."MANAGER" MODIFY ("MANAGER_PASSPORT_NUMBER" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."MANAGER" MODIFY ("MANAGER_ITN" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."MANAGER" MODIFY ("MANAGER_SNILS" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."MANAGER" ADD CONSTRAINT "CH_MANAGER_PASSPORT_NUMBER" CHECK (regexp_like(Manager_Passport_Number, '[0-9]{6}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."MANAGER" ADD CONSTRAINT "CH_MANAGER_ITN" CHECK (regexp_like(Manager_ITN, '[0-9]{10}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."MANAGER" ADD CONSTRAINT "CH_MANAGER_SNILS" CHECK (regexp_like(Manager_SNILS, '[0-9]{3}-[0-9]{3}-[0-9]{3} [0-9][0-9]')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."MANAGER" ADD CONSTRAINT "CH_MANAGER_PASSPORT_SERIES" CHECK (regexp_like(Manager_Passport_Series, '[0-9]{4}')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."MANAGER" ADD CONSTRAINT "UQ_MANAGER_ITN" UNIQUE ("MANAGER_ITN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##CARGO_DEV"."MANAGER" ADD CONSTRAINT "UQ_MANAGER_SNILS" UNIQUE ("MANAGER_SNILS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##CARGO_DEV"."MANAGER" ADD CONSTRAINT "PK_MANAGER" PRIMARY KEY ("ID_MANAGER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COMPLEXITY
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."COMPLEXITY" MODIFY ("ID_COMPLEXITY" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."COMPLEXITY" MODIFY ("COMPLEXITY_LEVEL" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."COMPLEXITY" ADD CONSTRAINT "UQ_COMPLEXITY_LEVEL" UNIQUE ("COMPLEXITY_LEVEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##CARGO_DEV"."COMPLEXITY" ADD CONSTRAINT "PK_COMPLEXITY" PRIMARY KEY ("ID_COMPLEXITY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DELIVERY_POINT
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."DELIVERY_POINT" MODIFY ("ID_DELIVERY_POINT" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DELIVERY_POINT" MODIFY ("REQUEST_ID" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DELIVERY_POINT" MODIFY ("DELIVERY_POINT_DESTINATION" NOT NULL ENABLE);
  ALTER TABLE "C##CARGO_DEV"."DELIVERY_POINT" ADD CONSTRAINT "CH_DELIVERY_POINT_MARK" CHECK (regexp_like(Delivery_Point_Mark, '[+]|[-]')) ENABLE;
  ALTER TABLE "C##CARGO_DEV"."DELIVERY_POINT" ADD CONSTRAINT "PK_DELIVERY_POINT" PRIMARY KEY ("ID_DELIVERY_POINT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CARGO
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."CARGO" ADD CONSTRAINT "FK_REQUEST" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "C##CARGO_DEV"."REQUEST" ("ID_REQUEST") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table COMBINATION_ROUTE_SHEET_CARGO
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO" ADD CONSTRAINT "FK_ROUTE_SHEET_COMBINATION_2" FOREIGN KEY ("ROUTE_SHEET_ID")
	  REFERENCES "C##CARGO_DEV"."ROUTE_SHEET" ("ID_ROUTE_SHEET") ENABLE;
  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_CARGO" ADD CONSTRAINT "FK_CARGO_COMBINATION_2" FOREIGN KEY ("CARGO_ID")
	  REFERENCES "C##CARGO_DEV"."CARGO" ("ID_CARGO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table COMBINATION_ROUTE_SHEET_DELIVERY_POINT
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT" ADD CONSTRAINT "FK_ROUTE_SHEET_COMBINATION_1" FOREIGN KEY ("ROUTE_SHEET_ID")
	  REFERENCES "C##CARGO_DEV"."ROUTE_SHEET" ("ID_ROUTE_SHEET") ENABLE;
  ALTER TABLE "C##CARGO_DEV"."COMBINATION_ROUTE_SHEET_DELIVERY_POINT" ADD CONSTRAINT "FK_DELIVERY_POINT_COMBINATION_1" FOREIGN KEY ("DELIVERY_POINT_ID")
	  REFERENCES "C##CARGO_DEV"."DELIVERY_POINT" ("ID_DELIVERY_POINT") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DELIVERY_POINT
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."DELIVERY_POINT" ADD CONSTRAINT "FK_REQUEST_DELIVERY" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "C##CARGO_DEV"."REQUEST" ("ID_REQUEST") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table REQUEST
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."REQUEST" ADD CONSTRAINT "FK_MANAGER" FOREIGN KEY ("MANAGER_ID")
	  REFERENCES "C##CARGO_DEV"."MANAGER" ("ID_MANAGER") ENABLE;
  ALTER TABLE "C##CARGO_DEV"."REQUEST" ADD CONSTRAINT "FK_CLIENT" FOREIGN KEY ("CLIENT_ID")
	  REFERENCES "C##CARGO_DEV"."CLIENT" ("ID_CLIENT") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ROUTE_SHEET
--------------------------------------------------------

  ALTER TABLE "C##CARGO_DEV"."ROUTE_SHEET" ADD CONSTRAINT "FK_COMPLEXITY_ROUTE" FOREIGN KEY ("COMPLEXITY_ID")
	  REFERENCES "C##CARGO_DEV"."COMPLEXITY" ("ID_COMPLEXITY") ENABLE;
  ALTER TABLE "C##CARGO_DEV"."ROUTE_SHEET" ADD CONSTRAINT "FK_VEHICLE_ROUTE" FOREIGN KEY ("VEHICLE_ID")
	  REFERENCES "C##CARGO_DEV"."VEHICLE" ("ID_VEHICLE") ENABLE;
  ALTER TABLE "C##CARGO_DEV"."ROUTE_SHEET" ADD CONSTRAINT "FK_DRIVER_ROUTE" FOREIGN KEY ("DRIVER_ID")
	  REFERENCES "C##CARGO_DEV"."DRIVER" ("ID_DRIVER") ENABLE;
